"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSwaggerPetstoreMSW = exports.getHealthCheckMock = exports.getShowPetByIdMock = exports.getCreatePetsMock = exports.getListPetsMock = exports.useHealthCheck = exports.getHealthCheckQueryOptions = exports.getHealthCheckQueryKey = exports.healthCheck = exports.useShowPetById = exports.getShowPetByIdQueryOptions = exports.getShowPetByIdQueryKey = exports.showPetById = exports.useCreatePets = exports.getCreatePetsMutationOptions = exports.createPets = exports.useListPets = exports.getListPetsQueryOptions = exports.getListPetsQueryKey = exports.listPets = void 0;
/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
var axios_1 = __importDefault(require("axios"));
var react_query_1 = require("@tanstack/react-query");
var msw_1 = require("msw");
var faker_1 = require("@faker-js/faker");
/**
 * @summary List all pets
 */
var listPets = function (params, options) {
    return axios_1.default.get("/pets", __assign(__assign({}, options), { params: __assign(__assign({}, params), options === null || options === void 0 ? void 0 : options.params) }));
};
exports.listPets = listPets;
var getListPetsQueryKey = function (params) { return __spreadArray(["/pets"], __read((params ? [params] : [])), false); };
exports.getListPetsQueryKey = getListPetsQueryKey;
var getListPetsQueryOptions = function (params, options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, axiosOptions = _b.axios;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getListPetsQueryKey)(params);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.listPets)(params, __assign({ signal: signal }, axiosOptions));
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.getListPetsQueryOptions = getListPetsQueryOptions;
var useListPets = function (params, options) {
    var queryOptions = (0, exports.getListPetsQueryOptions)(params, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useListPets = useListPets;
/**
 * @summary Create a pet
 */
var createPets = function (createPetsBody, params, options) {
    return axios_1.default.post("/pets", createPetsBody, __assign(__assign({}, options), { params: __assign(__assign({}, params), options === null || options === void 0 ? void 0 : options.params) }));
};
exports.createPets = createPets;
var getCreatePetsMutationOptions = function (options) {
    var _a = options !== null && options !== void 0 ? options : {}, mutationOptions = _a.mutation, axiosOptions = _a.axios;
    var mutationFn = function (props) {
        var _a = props !== null && props !== void 0 ? props : {}, data = _a.data, params = _a.params;
        return (0, exports.createPets)(data, params, axiosOptions);
    };
    return __assign({ mutationFn: mutationFn }, mutationOptions);
};
exports.getCreatePetsMutationOptions = getCreatePetsMutationOptions;
var useCreatePets = function (options) {
    var mutationOptions = (0, exports.getCreatePetsMutationOptions)(options);
    return (0, react_query_1.useMutation)(mutationOptions);
};
exports.useCreatePets = useCreatePets;
/**
 * @summary Info for a specific pet
 */
var showPetById = function (petId, options) {
    return axios_1.default.get("/pets/".concat(petId), options);
};
exports.showPetById = showPetById;
var getShowPetByIdQueryKey = function (petId) { return ["/pets/".concat(petId)]; };
exports.getShowPetByIdQueryKey = getShowPetByIdQueryKey;
var getShowPetByIdQueryOptions = function (petId, options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, axiosOptions = _b.axios;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getShowPetByIdQueryKey)(petId);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.showPetById)(petId, __assign({ signal: signal }, axiosOptions));
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(petId) }, queryOptions);
};
exports.getShowPetByIdQueryOptions = getShowPetByIdQueryOptions;
var useShowPetById = function (petId, options) {
    var queryOptions = (0, exports.getShowPetByIdQueryOptions)(petId, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useShowPetById = useShowPetById;
/**
 * @summary health check
 */
var healthCheck = function (options) {
    return axios_1.default.get("/health", options);
};
exports.healthCheck = healthCheck;
var getHealthCheckQueryKey = function () { return ["/health"]; };
exports.getHealthCheckQueryKey = getHealthCheckQueryKey;
var getHealthCheckQueryOptions = function (options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, axiosOptions = _b.axios;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getHealthCheckQueryKey)();
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.healthCheck)(__assign({ signal: signal }, axiosOptions));
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.getHealthCheckQueryOptions = getHealthCheckQueryOptions;
var useHealthCheck = function (options) {
    var queryOptions = (0, exports.getHealthCheckQueryOptions)(options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useHealthCheck = useHealthCheck;
var getListPetsMock = function () { return (Array.from({ length: faker_1.faker.datatype.number({ min: 5, max: 15 }) }, function (_, i) { return i + 1; }).map(function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); })); };
exports.getListPetsMock = getListPetsMock;
var getCreatePetsMock = function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); };
exports.getCreatePetsMock = getCreatePetsMock;
var getShowPetByIdMock = function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); };
exports.getShowPetByIdMock = getShowPetByIdMock;
var getHealthCheckMock = function () { return (faker_1.faker.random.word()); };
exports.getHealthCheckMock = getHealthCheckMock;
var getSwaggerPetstoreMSW = function () { return [
    msw_1.rest.get('*/pets', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getListPetsMock)()));
    }), msw_1.rest.post('*/pets', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getCreatePetsMock)()));
    }), msw_1.rest.get('*/pets/:petId', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getShowPetByIdMock)()));
    }), msw_1.rest.get('*/health', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.text((0, exports.getHealthCheckMock)()));
    }),
]; };
exports.getSwaggerPetstoreMSW = getSwaggerPetstoreMSW;
//# sourceMappingURL=data:application/json;base64,