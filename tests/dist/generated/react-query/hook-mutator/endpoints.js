"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHealthCheck = exports.useHealthCheckQueryOptions = exports.getHealthCheckQueryKey = exports.useHealthCheckHook = exports.useShowPetById = exports.useShowPetByIdQueryOptions = exports.getShowPetByIdQueryKey = exports.useShowPetByIdHook = exports.useCreatePets = exports.useCreatePetsMutationOptions = exports.useCreatePetsHook = exports.useListPets = exports.useListPetsQueryOptions = exports.getListPetsQueryKey = exports.useListPetsHook = void 0;
/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
var react_query_1 = require("@tanstack/react-query");
var use_custom_instance_1 = require("../../../mutators/use-custom-instance");
/**
 * @summary List all pets
 */
var useListPetsHook = function () {
    var listPets = (0, use_custom_instance_1.useCustomInstance)();
    return function (params, signal) {
        return listPets({ url: "/pets", method: 'get', params: params, signal: signal
        });
    };
};
exports.useListPetsHook = useListPetsHook;
var getListPetsQueryKey = function (params) { return __spreadArray(["/pets"], __read((params ? [params] : [])), false); };
exports.getListPetsQueryKey = getListPetsQueryKey;
var useListPetsQueryOptions = function (params, options) {
    var _a;
    var queryOptions = (options !== null && options !== void 0 ? options : {}).query;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getListPetsQueryKey)(params);
    var listPets = (0, exports.useListPetsHook)();
    var queryFn = function (_a) {
        var signal = _a.signal;
        return listPets(params, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.useListPetsQueryOptions = useListPetsQueryOptions;
var useListPets = function (params, options) {
    var queryOptions = (0, exports.useListPetsQueryOptions)(params, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useListPets = useListPets;
/**
 * @summary Create a pet
 */
var useCreatePetsHook = function () {
    var createPets = (0, use_custom_instance_1.useCustomInstance)();
    return function (createPetsBody, params) {
        return createPets({ url: "/pets", method: 'post',
            headers: { 'Content-Type': 'application/json', },
            data: createPetsBody, params: params
        });
    };
};
exports.useCreatePetsHook = useCreatePetsHook;
var useCreatePetsMutationOptions = function (options) {
    var mutationOptions = (options !== null && options !== void 0 ? options : {}).mutation;
    var createPets = (0, exports.useCreatePetsHook)();
    var mutationFn = function (props) {
        var _a = props !== null && props !== void 0 ? props : {}, data = _a.data, params = _a.params;
        return createPets(data, params);
    };
    return __assign({ mutationFn: mutationFn }, mutationOptions);
};
exports.useCreatePetsMutationOptions = useCreatePetsMutationOptions;
var useCreatePets = function (options) {
    var mutationOptions = (0, exports.useCreatePetsMutationOptions)(options);
    return (0, react_query_1.useMutation)(mutationOptions);
};
exports.useCreatePets = useCreatePets;
/**
 * @summary Info for a specific pet
 */
var useShowPetByIdHook = function () {
    var showPetById = (0, use_custom_instance_1.useCustomInstance)();
    return function (petId, signal) {
        return showPetById({ url: "/pets/".concat(petId), method: 'get', signal: signal
        });
    };
};
exports.useShowPetByIdHook = useShowPetByIdHook;
var getShowPetByIdQueryKey = function (petId) { return ["/pets/".concat(petId)]; };
exports.getShowPetByIdQueryKey = getShowPetByIdQueryKey;
var useShowPetByIdQueryOptions = function (petId, options) {
    var _a;
    var queryOptions = (options !== null && options !== void 0 ? options : {}).query;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getShowPetByIdQueryKey)(petId);
    var showPetById = (0, exports.useShowPetByIdHook)();
    var queryFn = function (_a) {
        var signal = _a.signal;
        return showPetById(petId, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(petId) }, queryOptions);
};
exports.useShowPetByIdQueryOptions = useShowPetByIdQueryOptions;
var useShowPetById = function (petId, options) {
    var queryOptions = (0, exports.useShowPetByIdQueryOptions)(petId, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useShowPetById = useShowPetById;
/**
 * @summary health check
 */
var useHealthCheckHook = function () {
    var healthCheck = (0, use_custom_instance_1.useCustomInstance)();
    return function (signal) {
        return healthCheck({ url: "/health", method: 'get', signal: signal
        });
    };
};
exports.useHealthCheckHook = useHealthCheckHook;
var getHealthCheckQueryKey = function () { return ["/health"]; };
exports.getHealthCheckQueryKey = getHealthCheckQueryKey;
var useHealthCheckQueryOptions = function (options) {
    var _a;
    var queryOptions = (options !== null && options !== void 0 ? options : {}).query;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getHealthCheckQueryKey)();
    var healthCheck = (0, exports.useHealthCheckHook)();
    var queryFn = function (_a) {
        var signal = _a.signal;
        return healthCheck(signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.useHealthCheckQueryOptions = useHealthCheckQueryOptions;
var useHealthCheck = function (options) {
    var queryOptions = (0, exports.useHealthCheckQueryOptions)(options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useHealthCheck = useHealthCheck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZ2VuZXJhdGVkL3JlYWN0LXF1ZXJ5L2hvb2stbXV0YXRvci9lbmRwb2ludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0dBS0c7QUFDSCxxREFHOEI7QUFpQjlCLDZFQUEwRTtBQUkxRTs7R0FFRztBQUNJLElBQU0sZUFBZSxHQUFHO0lBQ3ZCLElBQU0sUUFBUSxHQUFHLElBQUEsdUNBQWlCLEdBQVEsQ0FBQztJQUUzQyxPQUFPLFVBQ1gsTUFBc0IsRUFDekIsTUFBb0I7UUFFYixPQUFPLFFBQVEsQ0FDYixFQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFDOUIsTUFBTSxRQUFBLEVBQUUsTUFBTSxRQUFBO1NBQ2pCLENBQ00sQ0FBQztJQUNKLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWJNLFFBQUEsZUFBZSxtQkFhckI7QUFHQSxJQUFNLG1CQUFtQixHQUFHLFVBQUMsTUFBc0IsSUFBTSxPQUFBLGVBQUMsT0FBTyxVQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBVSxFQUE5QyxDQUE4QyxDQUFDO0FBQWxHLFFBQUEsbUJBQW1CLHVCQUErRTtBQUl4RyxJQUFNLHVCQUF1QixHQUFHLFVBQWtGLE1BQXNCLEVBQUUsT0FBNkc7O0lBRXZQLElBQU8sWUFBWSxHQUFJLENBQUEsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxDQUFBLE1BQWpCLENBQWtCO0lBRTFDLElBQU0sUUFBUSxHQUFJLE1BQUEsWUFBWSxhQUFaLFlBQVksdUJBQVosWUFBWSxDQUFFLFFBQVEsbUNBQUksSUFBQSwyQkFBbUIsRUFBQyxNQUFNLENBQUMsQ0FBQztJQUV4RSxJQUFN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