"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSwaggerPetstoreMSW = exports.getHealthCheckMock = exports.getListPetsMock = exports.useHealthCheck = exports.getHealthCheckQueryOptions = exports.getHealthCheckQueryKey = exports.healthCheck = exports.useListPets = exports.getListPetsQueryOptions = exports.getListPetsQueryKey = exports.listPets = void 0;
/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
var axios_1 = __importDefault(require("axios"));
var react_query_1 = require("@tanstack/react-query");
var msw_1 = require("msw");
var faker_1 = require("@faker-js/faker");
/**
 * @summary List all pets
 */
var listPets = function (params, options) {
    return axios_1.default.get("/pets", __assign(__assign({}, options), { params: __assign(__assign({}, params), options === null || options === void 0 ? void 0 : options.params) }));
};
exports.listPets = listPets;
var getListPetsQueryKey = function (params) { return __spreadArray(["/pets"], __read((params ? [params] : [])), false); };
exports.getListPetsQueryKey = getListPetsQueryKey;
var getListPetsQueryOptions = function (params, options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, axiosOptions = _b.axios;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getListPetsQueryKey)(params);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.listPets)(params, __assign({ signal: signal }, axiosOptions));
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.getListPetsQueryOptions = getListPetsQueryOptions;
var useListPets = function (params, options) {
    var queryOptions = (0, exports.getListPetsQueryOptions)(params, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useListPets = useListPets;
/**
 * @summary health check
 */
var healthCheck = function (options) {
    return axios_1.default.get("/health", options);
};
exports.healthCheck = healthCheck;
var getHealthCheckQueryKey = function () { return ["/health"]; };
exports.getHealthCheckQueryKey = getHealthCheckQueryKey;
var getHealthCheckQueryOptions = function (options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, axiosOptions = _b.axios;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getHealthCheckQueryKey)();
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.healthCheck)(__assign({ signal: signal }, axiosOptions));
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.getHealthCheckQueryOptions = getHealthCheckQueryOptions;
var useHealthCheck = function (options) {
    var queryOptions = (0, exports.getHealthCheckQueryOptions)(options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useHealthCheck = useHealthCheck;
var getListPetsMock = function () { return (Array.from({ length: faker_1.faker.datatype.number({ min: 1, max: 10 }) }, function (_, i) { return i + 1; }).map(function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); })); };
exports.getListPetsMock = getListPetsMock;
var getHealthCheckMock = function () { return (faker_1.faker.random.word()); };
exports.getHealthCheckMock = getHealthCheckMock;
var getSwaggerPetstoreMSW = function () { return [
    msw_1.rest.get('*/pets', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getListPetsMock)()));
    }), msw_1.rest.get('*/health', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.text((0, exports.getHealthCheckMock)()));
    }),
]; };
exports.getSwaggerPetstoreMSW = getSwaggerPetstoreMSW;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZ2VuZXJhdGVkL3JlYWN0LXF1ZXJ5L2RlcHJlY2F0ZWQvZW5kcG9pbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7OztHQUtHO0FBQ0gsZ0RBQXlCO0FBTXpCLHFEQUU4QjtBQVk5QiwyQkFFWTtBQUNaLHlDQUV3QjtBQUl4Qjs7R0FFRztBQUNJLElBQU0sUUFBUSxHQUFHLFVBQ3BCLE1BQXNCLEVBQUUsT0FBNEI7SUFFcEQsT0FBTyxlQUFLLENBQUMsR0FBRyxDQUNkLE9BQU8sd0JBQ04sT0FBTyxLQUNOLE1BQU0sd0JBQU0sTUFBTSxHQUFLLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLEtBQ3pDLENBQUM7QUFDSixDQUFDLENBQUE7QUFSVSxRQUFBLFFBQVEsWUFRbEI7QUFHSSxJQUFNLG1CQUFtQixHQUFHLFVBQUMsTUFBc0IsSUFBTSxPQUFBLGVBQUMsT0FBTyxVQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBVSxFQUE5QyxDQUE4QyxDQUFDO0FBQWxHLFFBQUEsbUJBQW1CLHVCQUErRTtBQUl4RyxJQUFNLHVCQUF1QixHQUFHLFVBQTJFLE1BQXNCLEVBQUUsT0FBb0g7O0lBRXhQLElBQUEsS0FBNkMsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxFQUFsRCxZQUFZLFdBQUEsRUFBUyxZQUFZLFdBQWlCLENBQUM7SUFFL0QsSUFBTSxRQUFRLEdBQUksTUFBQSxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsUUFBUSxtQ0FBSSxJQUFBLDJCQUFtQixFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBSXRFLElBQU0sT0FBTyxHQUF3RCxVQUFDLEVBQVU7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LENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBRSxhQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxjQUFjLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsYUFBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLDZCQUE2QixFQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsYUFBYSxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLGFBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyw2QkFBNkIsRUFBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBaHZELENBQWd2RCxDQUFDLENBQUMsRUFBajFELENBQWkxRCxDQUFBO0FBQXoyRCxRQUFBLGVBQWUsbUJBQTAxRDtBQUUvMkQsSUFBTSxrQkFBa0IsR0FBRyxjQUFNLE9BQUEsQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQXJCLENBQXFCLENBQUE7QUFBaEQsUUFBQSxrQkFBa0Isc0JBQThCO0FBRXRELElBQU0scUJBQXFCLEdBQUcsY0FBTSxPQUFBO0lBQzNDLFVBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQzFCLE9BQU8sR0FBRyxDQUNSLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLEVBQzFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBQSx1QkFBZSxHQUFFLENBQUMsQ0FDbEIsQ0FBQTtJQUNILENBQUMsQ0FBQyxFQUFDLFVBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ3JDLE9BQU8sR0FBRyxDQUNSLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLEVBQzFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBQSwwQkFBa0IsR0FBRSxDQUFDLENBQ3JCLENBQUE7SUFDSCxDQUFDLENBQUM7Q0FBRSxFQWJpQyxDQWFqQyxDQUFBO0FBYkcsUUFBQSxxQkFBcUIseUJBYXhCIn0=