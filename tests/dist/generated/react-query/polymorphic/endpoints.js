"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiMSW = exports.getGetPolymorphicResponseMock = exports.useGetPolymorphicResponse = exports.getGetPolymorphicResponseQueryOptions = exports.getGetPolymorphicResponseQueryKey = exports.getPolymorphicResponse = void 0;
/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: V1
 */
var axios_1 = __importDefault(require("axios"));
var react_query_1 = require("@tanstack/react-query");
var msw_1 = require("msw");
var faker_1 = require("@faker-js/faker");
var getPolymorphicResponse = function (options) {
    return axios_1.default.get("/demo", options);
};
exports.getPolymorphicResponse = getPolymorphicResponse;
var getGetPolymorphicResponseQueryKey = function () { return ["/demo"]; };
exports.getGetPolymorphicResponseQueryKey = getGetPolymorphicResponseQueryKey;
var getGetPolymorphicResponseQueryOptions = function (options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, axiosOptions = _b.axios;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getGetPolymorphicResponseQueryKey)();
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.getPolymorphicResponse)(__assign({ signal: signal }, axiosOptions));
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn }, queryOptions);
};
exports.getGetPolymorphicResponseQueryOptions = getGetPolymorphicResponseQueryOptions;
var useGetPolymorphicResponse = function (options) {
    var queryOptions = (0, exports.getGetPolymorphicResponseQueryOptions)(options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useGetPolymorphicResponse = useGetPolymorphicResponse;
var getGetPolymorphicResponseMock = function () { return (faker_1.faker.helpers.arrayElement([{ value: faker_1.faker.helpers.arrayElement([{}, undefined]), key: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), type: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['BOOLEAN', 'STRING']), undefined]), }, { value: faker_1.faker.helpers.arrayElement([{}, undefined]), key: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), type: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['BOOLEAN', 'STRING']), undefined]), }])); };
exports.getGetPolymorphicResponseMock = getGetPolymorphicResponseMock;
var getApiMSW = function () { return [
    msw_1.rest.get('*/demo', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getGetPolymorphicResponseMock)()));
    }),
]; };
exports.getApiMSW = getApiMSW;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZ2VuZXJhdGVkL3JlYWN0LXF1ZXJ5L3BvbHltb3JwaGljL2VuZHBvaW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7OztHQUtHO0FBQ0gsZ0RBQXlCO0FBTXpCLHFEQUU4QjtBQVU5QiwyQkFFWTtBQUNaLHlDQUV3QjtBQUlqQixJQUFNLHNCQUFzQixHQUFHLFVBQ2pDLE9BQTRCO0lBRTdCLE9BQU8sZUFBSyxDQUFDLEdBQUcsQ0FDZCxPQUFPLEVBQUMsT0FBTyxDQUNoQixDQUFDO0FBQ0osQ0FBQyxDQUFBO0FBTlUsUUFBQSxzQkFBc0IsMEJBTWhDO0FBR0ksSUFBTSxpQ0FBaUMsR0FBRyxjQUFNLE9BQUEsQ0FBQyxPQUFPLENBQVUsRUFBbEIsQ0FBa0IsQ0FBQztBQUE3RCxRQUFBLGlDQUFpQyxxQ0FBNEI7QUFJbkUsSUFBTSxxQ0FBcUMsR0FBRyxVQUE0RixPQUFrSTs7SUFFN1EsSUFBQSxLQUE2QyxPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSxFQUFFLEVBQWxELFlBQVksV0FBQSxFQUFTLFlBQVksV0FBaUIsQ0FBQztJQUUvRCxJQUFNLFFBQVEsR0FBSSxNQUFBLFlBQVksYUFBWixZQUFZLHVCQUFaLFlBQVksQ0FBRSxRQUFRLG1DQUFJLElBQUEseUNBQWlDLEdBQUUsQ0FBQztJQUk5RSxJQUFNLE9BQU8sR0FBc0UsVUFBQyxFQUFVO1lBQVIsTUFBTSxZQUFBO1FBQU8sT0FBQSxJQUFBLDhCQUFzQixhQUFHLE1BQU0sUUFBQSxJQUFLLFlBQVksRUFBRztJQUFuRCxDQUFtRCxDQUFDO0lBSXhKLGtCQUFVLFFBQVEsVUFBQSxFQUFFLE9BQU8sU0FBQSxJQUFLLFlBQVksRUFBQztBQUFBLENBQUMsQ0FBQTtBQVpwQyxRQUFBLHFDQUFxQyx5Q0FZRDtBQUsxQyxJQUFNLHlCQUF5QixHQUFHLFVBQ3ZDLE9BQWtJO0lBSWxJLElBQU0sWUFBWSxHQUFHLElBQUEsNkNBQXFDLEVBQUMsT0FBTyxDQUFDLENBQUE7SUFFbkUsSUFBTSxLQUFLLEdBQUcsSUFBQSxzQkFBUSxFQUFDLFlBQVksQ0FBNEQsQ0FBQztJQUVoRyxLQUFLLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFFdkMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUE7QUFaWSxRQUFBLHlCQUF5Qiw2QkFZckM7QUFLTSxJQUFNLDZCQUE2QixHQUFHLGNBQU0sT0FBQSxDQUFDLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLEVBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFFLEVBQUMsRUFBQyxLQUFLLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLEVBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLEVBQW5kLENBQW1kLENBQUE7QUFBemYsUUFBQSw2QkFBNkIsaUNBQTRkO0FBRS9mLElBQU0sU0FBUyxHQUFHLGNBQU0sT0FBQTtJQUMvQixVQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRztRQUMxQixPQUFPLEdBQUcsQ0FDUixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUNmLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxFQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUEscUNBQTZCLEdBQUUsQ0FBQyxDQUNoQyxDQUFBO0lBQ0gsQ0FBQyxDQUFDO0NBQUUsRUFQcUIsQ0FPckIsQ0FBQTtBQVBHLFFBQUEsU0FBUyxhQU9aIn0=