"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSwaggerPetstoreMSW = exports.getHealthCheckMock = exports.getShowPetByIdMock = exports.getCreatePetsMock = exports.getListPetsMock = exports.useHealthCheck = exports.getHealthCheckQueryOptions = exports.useHealthCheckInfinite = exports.getHealthCheckInfiniteQueryOptions = exports.getHealthCheckQueryKey = exports.healthCheck = exports.useShowPetById = exports.getShowPetByIdQueryOptions = exports.useShowPetByIdInfinite = exports.getShowPetByIdInfiniteQueryOptions = exports.getShowPetByIdQueryKey = exports.showPetById = exports.useCreatePets = exports.getCreatePetsMutationOptions = exports.createPets = exports.useListPets = exports.getListPetsQueryOptions = exports.useListPetsInfinite = exports.getListPetsInfiniteQueryOptions = exports.getListPetsQueryKey = exports.listPets = void 0;
/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
var react_query_1 = require("@tanstack/react-query");
var msw_1 = require("msw");
var faker_1 = require("@faker-js/faker");
var multi_arguments_1 = require("../../../mutators/multi-arguments");
/**
 * @summary List all pets
 */
var listPets = function (params, version, options, signal) {
    if (version === void 0) { version = 1; }
    return (0, multi_arguments_1.customInstance)({ url: "/v".concat(version, "/pets"), method: 'get', params: params, signal: signal
    }, options);
};
exports.listPets = listPets;
var getListPetsQueryKey = function (params, version) {
    if (version === void 0) { version = 1; }
    return __spreadArray(["/v".concat(version, "/pets")], __read((params ? [params] : [])), false);
};
exports.getListPetsQueryKey = getListPetsQueryKey;
var getListPetsInfiniteQueryOptions = function (params, version, options) {
    var _a;
    if (version === void 0) { version = 1; }
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, requestOptions = _b.request;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getListPetsQueryKey)(params, version);
    var queryFn = function (_a) {
        var signal = _a.signal, pageParam = _a.pageParam;
        return (0, exports.listPets)(__assign({ limit: pageParam }, params), version, requestOptions, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(version) }, queryOptions);
};
exports.getListPetsInfiniteQueryOptions = getListPetsInfiniteQueryOptions;
var useListPetsInfinite = function (params, version, options) {
    if (version === void 0) { version = 1; }
    var queryOptions = (0, exports.getListPetsInfiniteQueryOptions)(params, version, options);
    var query = (0, react_query_1.useInfiniteQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useListPetsInfinite = useListPetsInfinite;
var getListPetsQueryOptions = function (params, version, options) {
    var _a;
    if (version === void 0) { version = 1; }
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, requestOptions = _b.request;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getListPetsQueryKey)(params, version);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.listPets)(params, version, requestOptions, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(version) }, queryOptions);
};
exports.getListPetsQueryOptions = getListPetsQueryOptions;
var useListPets = function (params, version, options) {
    if (version === void 0) { version = 1; }
    var queryOptions = (0, exports.getListPetsQueryOptions)(params, version, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useListPets = useListPets;
/**
 * @summary Create a pet
 */
var createPets = function (createPetsBody, params, version, options) {
    if (version === void 0) { version = 1; }
    return (0, multi_arguments_1.customInstance)({ url: "/v".concat(version, "/pets"), method: 'post',
        headers: { 'Content-Type': 'application/json', },
        data: createPetsBody, params: params
    }, options);
};
exports.createPets = createPets;
var getCreatePetsMutationOptions = function (options) {
    var _a = options !== null && options !== void 0 ? options : {}, mutationOptions = _a.mutation, requestOptions = _a.request;
    var mutationFn = function (props) {
        var _a = props !== null && props !== void 0 ? props : {}, data = _a.data, params = _a.params, version = _a.version;
        return (0, exports.createPets)(data, params, version, requestOptions);
    };
    return __assign({ mutationFn: mutationFn }, mutationOptions);
};
exports.getCreatePetsMutationOptions = getCreatePetsMutationOptions;
var useCreatePets = function (options) {
    var mutationOptions = (0, exports.getCreatePetsMutationOptions)(options);
    return (0, react_query_1.useMutation)(mutationOptions);
};
exports.useCreatePets = useCreatePets;
/**
 * @summary Info for a specific pet
 */
var showPetById = function (petId, version, options, signal) {
    if (version === void 0) { version = 1; }
    return (0, multi_arguments_1.customInstance)({ url: "/v".concat(version, "/pets/").concat(petId), method: 'get', signal: signal
    }, options);
};
exports.showPetById = showPetById;
var getShowPetByIdQueryKey = function (petId, version) {
    if (version === void 0) { version = 1; }
    return ["/v".concat(version, "/pets/").concat(petId)];
};
exports.getShowPetByIdQueryKey = getShowPetByIdQueryKey;
var getShowPetByIdInfiniteQueryOptions = function (petId, version, options) {
    var _a;
    if (version === void 0) { version = 1; }
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, requestOptions = _b.request;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getShowPetByIdQueryKey)(petId, version);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.showPetById)(petId, version, requestOptions, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(version && petId) }, queryOptions);
};
exports.getShowPetByIdInfiniteQueryOptions = getShowPetByIdInfiniteQueryOptions;
var useShowPetByIdInfinite = function (petId, version, options) {
    if (version === void 0) { version = 1; }
    var queryOptions = (0, exports.getShowPetByIdInfiniteQueryOptions)(petId, version, options);
    var query = (0, react_query_1.useInfiniteQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useShowPetByIdInfinite = useShowPetByIdInfinite;
var getShowPetByIdQueryOptions = function (petId, version, options) {
    var _a;
    if (version === void 0) { version = 1; }
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, requestOptions = _b.request;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getShowPetByIdQueryKey)(petId, version);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.showPetById)(petId, version, requestOptions, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(version && petId) }, queryOptions);
};
exports.getShowPetByIdQueryOptions = getShowPetByIdQueryOptions;
var useShowPetById = function (petId, version, options) {
    if (version === void 0) { version = 1; }
    var queryOptions = (0, exports.getShowPetByIdQueryOptions)(petId, version, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useShowPetById = useShowPetById;
/**
 * @summary health check
 */
var healthCheck = function (version, options, signal) {
    if (version === void 0) { version = 1; }
    return (0, multi_arguments_1.customInstance)({ url: "/v".concat(version, "/health"), method: 'get', signal: signal
    }, options);
};
exports.healthCheck = healthCheck;
var getHealthCheckQueryKey = function (version) {
    if (version === void 0) { version = 1; }
    return ["/v".concat(version, "/health")];
};
exports.getHealthCheckQueryKey = getHealthCheckQueryKey;
var getHealthCheckInfiniteQueryOptions = function (version, options) {
    var _a;
    if (version === void 0) { version = 1; }
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, requestOptions = _b.request;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getHealthCheckQueryKey)(version);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.healthCheck)(version, requestOptions, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(version) }, queryOptions);
};
exports.getHealthCheckInfiniteQueryOptions = getHealthCheckInfiniteQueryOptions;
var useHealthCheckInfinite = function (version, options) {
    if (version === void 0) { version = 1; }
    var queryOptions = (0, exports.getHealthCheckInfiniteQueryOptions)(version, options);
    var query = (0, react_query_1.useInfiniteQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useHealthCheckInfinite = useHealthCheckInfinite;
var getHealthCheckQueryOptions = function (version, options) {
    var _a;
    if (version === void 0) { version = 1; }
    var _b = options !== null && options !== void 0 ? options : {}, queryOptions = _b.query, requestOptions = _b.request;
    var queryKey = (_a = queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.queryKey) !== null && _a !== void 0 ? _a : (0, exports.getHealthCheckQueryKey)(version);
    var queryFn = function (_a) {
        var signal = _a.signal;
        return (0, exports.healthCheck)(version, requestOptions, signal);
    };
    return __assign({ queryKey: queryKey, queryFn: queryFn, enabled: !!(version) }, queryOptions);
};
exports.getHealthCheckQueryOptions = getHealthCheckQueryOptions;
var useHealthCheck = function (version, options) {
    if (version === void 0) { version = 1; }
    var queryOptions = (0, exports.getHealthCheckQueryOptions)(version, options);
    var query = (0, react_query_1.useQuery)(queryOptions);
    query.queryKey = queryOptions.queryKey;
    return query;
};
exports.useHealthCheck = useHealthCheck;
var getListPetsMock = function () { return (Array.from({ length: faker_1.faker.datatype.number({ min: 1, max: 10 }) }, function (_, i) { return i + 1; }).map(function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); })); };
exports.getListPetsMock = getListPetsMock;
var getCreatePetsMock = function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); };
exports.getCreatePetsMock = getCreatePetsMock;
var getShowPetByIdMock = function () { return (faker_1.faker.helpers.arrayElement([{ cuteness: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Labradoodle']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']) }, { length: faker_1.faker.datatype.number({ min: undefined, max: undefined }), breed: faker_1.faker.helpers.arrayElement(['Dachshund']), barksPerMinute: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['dog']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }, { petsRequested: faker_1.faker.helpers.arrayElement([faker_1.faker.datatype.number({ min: undefined, max: undefined }), undefined]), type: faker_1.faker.helpers.arrayElement(['cat']), '@id': faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), id: faker_1.faker.datatype.number({ min: undefined, max: undefined }), name: faker_1.faker.random.word(), tag: faker_1.faker.helpers.arrayElement([faker_1.faker.random.word(), undefined]), email: faker_1.faker.helpers.arrayElement([faker_1.faker.internet.email(), undefined]), callingCode: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['+33', '+420', '+33']), undefined]), country: faker_1.faker.helpers.arrayElement([faker_1.faker.helpers.arrayElement(['People\'s Republic of China', 'Uruguay']), undefined]) }])); };
exports.getShowPetByIdMock = getShowPetByIdMock;
var getHealthCheckMock = function () { return (faker_1.faker.random.word()); };
exports.getHealthCheckMock = getHealthCheckMock;
var getSwaggerPetstoreMSW = function () { return [
    msw_1.rest.get('*/v:version/pets', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getListPetsMock)()));
    }), msw_1.rest.post('*/v:version/pets', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getCreatePetsMock)()));
    }), msw_1.rest.get('*/v:version/pets/:petId', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json((0, exports.getShowPetByIdMock)()));
    }), msw_1.rest.get('*/v:version/health', function (_req, res, ctx) {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.text((0, exports.getHealthCheckMock)()));
    }),
]; };
exports.getSwaggerPetstoreMSW = getSwaggerPetstoreMSW;
//# sourceMappingURL=data:application/json;base64,